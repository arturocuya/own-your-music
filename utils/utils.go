package utils

import (
	"fmt"
	"log"
	"net/url"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
	"unicode"

	"github.com/Rhymond/go-money"
	"golang.org/x/text/currency"
)

// taken from https://gist.github.com/sevkin/9798d67b2cb9d07cb05f89f14ba682f8
func OpenUrlInBrowser(url string) error {
	var cmd string
	var args []string

	switch runtime.GOOS {
	case "windows":
		cmd = "cmd"
		args = []string{"/c", "start"}
	case "darwin":
		cmd = "open"
	default: // "linux", "freebsd", "openbsd", "netbsd"
		cmd = "xdg-open"
	}
	args = append(args, url)
	return exec.Command(cmd, args...).Start()
}

// generated by chatgpt
func GetBaseURL(inputURL string) string {
	parsedURL, _ := url.Parse(inputURL)
	return fmt.Sprintf("%s://%s", parsedURL.Scheme, parsedURL.Host)
}

func SanitizeForComparison(text string) string {
	splitted := strings.Split(text, "")
	for i, _char := range splitted {
		char := _char[0]
		// weird ascii ranges. reference: https://www.asciitable.com/
		if (33 <= char && char <= 47) || (58 <= char && char <= 64) || (91 <= char && char <= 96) || (123 <= char && char <= 127) {
			splitted[i] = " "
		}

		// other weird bytes
		// fking half alive...
		if _char == "•" || _char == "·" {
			splitted[i] = " "
		}
	}

	text = strings.Join(splitted, "")

	text = strings.ReplaceAll(text, "...", " ")

	// reduce extra whitespace between words
	text = strings.Join(strings.Fields(text), " ")

	text = strings.Trim(text, " \t")
	text = strings.ToLower(text)

	return text
}

// removes any non-numeric or non-dot prefixes/suffixes
func RemoveNonNumericPrefixSuffix(s string) string {
	var result strings.Builder
	for _, r := range s {
		if (r >= '0' && r <= '9') || r == '.' {
			result.WriteRune(r)
		}
	}
	return result.String()
}

func ContainsEastAsianCharacters(s string) bool {
	for _, r := range s {
		// Hiragana and Katakana for Japanese,
		// Han for Chinese (and Japanese Kanji / Korean Hanja),
		// Hangul for Korean.
		if unicode.In(r, unicode.Hiragana, unicode.Katakana, unicode.Han, unicode.Hangul) {
			return true
		}
	}
	return false
}

func levenshteinDistance(a, b string) int {
	m := len(a)
	n := len(b)

	// Create a 2D slice to hold the distances.
	dp := make([][]int, m+1)
	for i := range dp {
		dp[i] = make([]int, n+1)
	}

	// Initialize the base cases.
	for i := 0; i <= m; i++ {
		dp[i][0] = i
	}
	for j := 0; j <= n; j++ {
		dp[0][j] = j
	}

	// Compute the distances.
	for i := 1; i <= m; i++ {
		for j := 1; j <= n; j++ {
			cost := 0
			if a[i-1] != b[j-1] {
				cost = 1
			}
			dp[i][j] = min(
				dp[i-1][j]+1,      // deletion
				dp[i][j-1]+1,      // insertion
				dp[i-1][j-1]+cost, // substitution
			)
		}
	}

	return dp[m][n]
}

// useful for comparing track, album or artist names vs. what's found on the scraped website
func MusicItemEquals(target string, maybe string) bool {
	if ContainsEastAsianCharacters(target) {
		lDistance := levenshteinDistance(target, maybe)
		log.Println("for", target, "vs", maybe, "distance is:", lDistance, "and ratio is:", float64(lDistance)/float64(len(target)))
		// tested 0.35 for japanese characters, not sure about other east asian langs
		return float64(lDistance)/float64(len(target)) <= 0.35
	} else {
		return strings.Contains(SanitizeForComparison(maybe), SanitizeForComparison(target))
	}
}

func ParsePrice(rawPrice string, currencyCode string) (*money.Money, error) {
	_, err := currency.ParseISO(currencyCode)

	if err != nil {
		return nil, err
	}

	priceNumber := RemoveNonNumericPrefixSuffix(rawPrice)
	priceNumber = strings.ReplaceAll(priceNumber, ",", "")
	splitted := strings.Split(priceNumber, ".")

	units, err := strconv.Atoi(splitted[0])

	if err != nil {
		return nil, err
	}

	amount := int64(units * 100)

	if len(splitted) > 1 {
		cents, err := strconv.Atoi(splitted[1])

		if err != nil {
			return nil, err
		}

		amount += int64(cents)
	}

	return money.New(amount, currencyCode), nil
}
